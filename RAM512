// Chip name: RAM512
// Inputs: in[16], address[9], load
// Outputs: out[16]
// Function: 	out(t) = RAM[address(t)](t)
//		If load(t-1) then
//			RAM[address(t-1)](t) = in(t-1)
// Comment: "=" is a 16-bit operation


CHIP RAM512 {
	IN in[16], load, address[9];
	OUT out[16];

	PARTS:

// Instead of implementing 512 different 1-bit register,
// We will make use of the pre-built lower level of RAM
// such as RAM64 in this case.

// address[9] will have the first 3 elements selecting the register for RAM8
// the next 3 elements selecting one of the 8 RAM8 building RAM64
// the last 3 elements selecting one of the 8 RAM64 building RAM512

DMux8Way(in=load, sel=address[6..8], a=a,b=b,c=c,d=d,e=e,f=f,g=g,h=h);

// Listing the 8 RAM64 using address[0..5]

RAM64(in=in, load=a, address=address[0..5], out=ram64a);
RAM64(in=in, load=b, address=address[0..5], out=ram64b);
RAM64(in=in, load=c, address=address[0..5], out=ram64c);
RAM64(in=in, load=d, address=address[0..5], out=ram64d);
RAM64(in=in, load=e, address=address[0..5], out=ram64e);
RAM64(in=in, load=f, address=address[0..5], out=ram64f);
RAM64(in=in, load=g, address=address[0..5], out=ram64g);
RAM64(in=in, load=h, address=address[0..5], out=ram64h);

// Use Mux8Way16 at the end to select which value to channel to the output

Mux8Way16(a=ram64a, b=ram64b, c=ram64c, d=ram64d, e=ram64e, f=ram64f, g=ram64g, h=ram64h, sel=address[6..8], out=out);
}
